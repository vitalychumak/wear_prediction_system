# app.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import time
import sys
import os

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ –∫–æ—Ä–µ–Ω–µ–≤–æ—ó –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –Ü–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
from core.knowledge_base import kb_instance
from core.data_generator import data_generator
from core.models.hybrid_mlp_lstm import hybrid_model
from utils.data_processor import DataProcessor

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∑–Ω–æ—Å—É –¥–µ—Ç–∞–ª–µ–π",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—ñ–≤ —Å–µ—Å—ñ—ó
if 'model_trained' not in st.session_state:
    st.session_state.model_trained = False
if 'training_data' not in st.session_state:
    st.session_state.training_data = None
if 'processed_data' not in st.session_state:
    st.session_state.processed_data = None

class WearPredictionApp:
    """–ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å Streamlit –¥–æ–¥–∞—Ç–∫—É."""
    
    def __init__(self):
        self.kb = kb_instance
        self.data_generator = data_generator
        self.model = hybrid_model
        self.data_processor = DataProcessor()
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É."""
        st.title("üîß –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∑–Ω–æ—Å—É –¥–µ—Ç–∞–ª–µ–π –ê–°–¢")
        st.markdown("---")
        
        # –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å –∑ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—î—é
        with st.sidebar:
            st.header("–ù–∞–≤—ñ–≥–∞—Ü—ñ—è")
            app_section = st.radio(
                "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:",
                ["üìä –û–≥–ª—è–¥ —Å–∏—Å—Ç–µ–º–∏", "üîç –ë–∞–∑–∞ –∑–Ω–∞–Ω—å", "üìà –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö", 
                 "ü§ñ –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ", "üìä –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è", "üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞"]
            )
            
            st.markdown("---")
            st.header("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏")
            if st.session_state.model_trained:
                st.success("‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–≤—á–µ–Ω–∞")
            else:
                st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–≤—á–µ–Ω–∞")
                
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É
            st.markdown("---")
            st.header("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
            st.info(
                "–¶—è —Å–∏—Å—Ç–µ–º–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≥—ñ–±—Ä–∏–¥–Ω—ñ –º–æ–¥–µ–ª—ñ ML –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è "
                "–∑–Ω–æ—Å—É –¥–µ—Ç–∞–ª–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω–æ—ó —Ç–∞ —Å—ñ–ª—å—Å—å–∫–æ–≥–æ—Å–ø–æ–¥–∞—Ä—Å—å–∫–æ—ó —Ç–µ—Ö–Ω—ñ–∫–∏."
            )
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è –ø–æ —Ä–æ–∑–¥—ñ–ª–∞—Ö
        if app_section == "üìä –û–≥–ª—è–¥ —Å–∏—Å—Ç–µ–º–∏":
            self.show_overview()
        elif app_section == "üîç –ë–∞–∑–∞ –∑–Ω–∞–Ω—å":
            self.show_knowledge_base()
        elif app_section == "üìà –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö":
            self.show_data_generation()
        elif app_section == "ü§ñ –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ":
            self.show_model_training()
        elif app_section == "üìä –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è":
            self.show_prediction()
        elif app_section == "üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞":
            self.show_analytics()
    
    def show_overview(self):
        """–†–æ–∑–¥—ñ–ª –æ–≥–ª—è–¥—É —Å–∏—Å—Ç–µ–º–∏."""
        st.header("üìä –û–≥–ª—è–¥ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∑–Ω–æ—Å—É")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                label="–î–µ—Ç–∞–ª–µ–π —É –±–∞–∑—ñ –∑–Ω–∞–Ω—å",
                value=len(self.kb.list_available_parts())
            )
            
        with col2:
            st.metric(
                label="–ú–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ —É –±–∞–∑—ñ",
                value=len(self.kb.materials)
            )
            
        with col3:
            status = "–ù–∞–≤—á–µ–Ω–∞" if st.session_state.model_trained else "–ù–µ –Ω–∞–≤—á–µ–Ω–∞"
            st.metric(
                label="–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª—ñ",
                value=status
            )
        
        st.markdown("---")
        
        # –û–ø–∏—Å —Å–∏—Å—Ç–µ–º–∏
        st.subheader("–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º–∏")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("""
            ### –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Å–∏—Å—Ç–µ–º–∏:
            
            1. **üîç –û–Ω—Ç–æ–ª–æ–≥—ñ—á–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω—å**
               - –î–µ—Ç–∞–ª—ñ, –º–∞—Ç–µ—Ä—ñ–∞–ª–∏, –º–µ—Ö–∞–Ω—ñ–∑–º–∏ –∑–Ω–æ—à—É–≤–∞–Ω–Ω—è
               - –§—ñ–∑–∏—á–Ω—ñ –º–æ–¥–µ–ª—ñ –∑–Ω–æ—Å—É
               
            2. **üìà –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö**
               - –ú–æ–¥–µ–ª—å –ê—Ä—á–∞—Ä–¥–∞ –¥–ª—è –∞–±—Ä–∞–∑–∏–≤–Ω–æ–≥–æ –∑–Ω–æ—Å—É
               - –ú–æ–¥–µ–ª—å –≤—Ç–æ–º–Ω–æ–≥–æ –∑–Ω–æ—Å—É
               - –†–µ–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —á–∞—Å–æ–≤—ñ —Ä—è–¥–∏
               
            3. **ü§ñ –ì—ñ–±—Ä–∏–¥–Ω–∞ ML-–º–æ–¥–µ–ª—å**
               - MLP –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –æ–∑–Ω–∞–∫
               - LSTM –¥–ª—è —á–∞—Å–æ–≤–∏—Ö —Ä—è–¥—ñ–≤
               - –¢—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è
               
            4. **üìä –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å**
               - –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
               - –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
               - –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –∑–≤—ñ—Ç–∏
            """)
        
        with col2:
            # –î—ñ–∞–≥—Ä–∞–º–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏ (—Å–ø—Ä–æ—â–µ–Ω–∞)
            st.image("https://via.placeholder.com/300x400/4CAF50/FFFFFF?text=System+Architecture", 
                    caption="–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º–∏")
    
    def show_knowledge_base(self):
        """–†–æ–∑–¥—ñ–ª –±–∞–∑–∏ –∑–Ω–∞–Ω—å."""
        st.header("üîç –û–Ω—Ç–æ–ª–æ–≥—ñ—á–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω—å")
        
        tab1, tab2, tab3 = st.tabs(["üìã –î–µ—Ç–∞–ª—ñ", "üî© –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏", "‚öôÔ∏è –ú–µ—Ö–∞–Ω—ñ–∑–º–∏ –∑–Ω–æ—Å—É"])
        
        with tab1:
            st.subheader("–î–µ—Ç–∞–ª—ñ —Ç–µ—Ö–Ω—ñ–∫–∏")
            parts = self.kb.list_available_parts()
            
            if parts:
                selected_part = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –¥–µ—Ç–∞–ª—å:", parts)
                part_info = self.kb.get_part_info(selected_part)
                
                if part_info:
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write("**–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:**")
                        st.write(f"üîß –ù–∞–∑–≤–∞: {part_info['part'].name}")
                        st.write(f"üÜî ID: {part_info['part'].id}")
                        
                    with col2:
                        if part_info['material']:
                            st.write("**–ú–∞—Ç–µ—Ä—ñ–∞–ª:**")
                            st.write(f"üì¶ {part_info['material'].name}")
                            st.write(f"üíé –¢–≤–µ—Ä–¥—ñ—Å—Ç—å: {part_info['material'].hardness_hv} HV")
                        
                        if part_info['wear_mechanism']:
                            st.write("**–ú–µ—Ö–∞–Ω—ñ–∑–º –∑–Ω–æ—Å—É:**")
                            st.write(f"‚öôÔ∏è {part_info['wear_mechanism'].name}")
                            st.write(f"üìù {part_info['wear_mechanism'].description}")
            else:
                st.warning("‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω—å –ø–æ—Ä–æ–∂–Ω—è. –î–æ–¥–∞–π—Ç–µ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å.")
        
        with tab2:
            st.subheader("–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏")
            if self.kb.materials:
                materials_data = []
                for material_id, material in self.kb.materials.items():
                    materials_data.append({
                        'ID': material_id,
                        '–ù–∞–∑–≤–∞': material.name,
                        '–¢–≤–µ—Ä–¥—ñ—Å—Ç—å (HV)': material.hardness_hv,
                        '–®–æ—Ä—Å—Ç–∫—ñ—Å—Ç—å': material.roughness_avg,
                        '–ú–æ–¥—É–ª—å –Æ–Ω–≥–∞': material.young_modulus
                    })
                
                materials_df = pd.DataFrame(materials_data)
                st.dataframe(materials_df, use_container_width=True)
            else:
                st.info("‚ÑπÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –¥–∞–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ —É –±–∞–∑—É –∑–Ω–∞–Ω—å.")
        
        with tab3:
            st.subheader("–ú–µ—Ö–∞–Ω—ñ–∑–º–∏ –∑–Ω–æ—à—É–≤–∞–Ω–Ω—è")
            if self.kb.wear_mechanisms:
                mechanisms_data = []
                for mechanism_id, mechanism in self.kb.wear_mechanisms.items():
                    mechanisms_data.append({
                        'ID': mechanism_id,
                        '–ù–∞–∑–≤–∞': mechanism.name,
                        '–û–ø–∏—Å': mechanism.description,
                        '–§—ñ–∑–∏—á–Ω–∞ –º–æ–¥–µ–ª—å': mechanism.physical_model
                    })
                
                mechanisms_df = pd.DataFrame(mechanisms_data)
                st.dataframe(mechanisms_df, use_container_width=True)
    
    def show_data_generation(self):
        """–†–æ–∑–¥—ñ–ª –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö."""
        st.header("üìà –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–Ω—Ç–µ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó")
            
            # –í–∏–±—ñ—Ä –¥–µ—Ç–∞–ª—ñ
            available_parts = self.kb.list_available_parts()
            selected_part = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –¥–µ—Ç–∞–ª—å:", available_parts)
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
            col1_1, col1_2 = st.columns(2)
            with col1_1:
                operating_hours = st.slider("–ß–∞—Å —Ä–æ–±–æ—Ç–∏ (–≥–æ–¥):", 100, 2000, 500)
                time_step = st.selectbox("–ö—Ä–æ–∫ —á–∞—Å—É (–≥–æ–¥):", [0.5, 1.0, 2.0, 5.0])
            with col1_2:
                noise_level = st.slider("–†—ñ–≤–µ–Ω—å —à—É–º—É:", 0.05, 0.5, 0.1)
                n_samples = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑—Ä–∞–∑–∫—ñ–≤:", 10, 10000, 1000)
            
            # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
            if st.button("üöÄ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ", type="primary"):
                with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö..."):
                    try:
                        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–∫—Ä–µ–º–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É
                        sample_data = self.data_generator.generate_wear_data(
                            selected_part, operating_hours, time_step, noise_level
                        )
                        
                        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è
                        full_dataset = self.data_generator.generate_dataset(n_samples)
                        
                        st.session_state.training_data = full_dataset
                        st.session_state.sample_data = sample_data
                        
                        st.success(f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(full_dataset)} –∑–∞–ø–∏—Å—ñ–≤!")
                        
                    except Exception as e:
                        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó: {e}")
        
        with col2:
            st.subheader("–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥")
            if 'sample_data' in st.session_state:
                data = st.session_state.sample_data
                
                st.metric("–ó–∞–ø–∏—Å—ñ–≤", len(data))
                st.metric("–ö–æ–ª–æ–Ω–æ–∫", len(data.columns))
                
                # –®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–Ω–æ—Å—É:**")
                st.write(f"–ú—ñ–Ω: {data['wear'].min():.2f} –º–∫–º")
                st.write(f"–ú–∞–∫—Å: {data['wear'].max():.2f} –º–∫–º")
                st.write(f"–°–µ—Ä–µ–¥–Ω—î: {data['wear'].mean():.2f} –º–∫–º")
        
        # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        if 'sample_data' in st.session_state:
            st.markdown("---")
            st.subheader("üìä –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö")
            
            data = st.session_state.sample_data
            
            tab1, tab2, tab3 = st.tabs(["üìà –ó–Ω–æ—Å —É —á–∞—Å—ñ", "üî• –ü–∞—Ä–∞–º–µ—Ç—Ä–∏", "üìã –¢–∞–±–ª–∏—Ü—è"])
            
            with tab1:
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.plot(data['time'], data['wear'], linewidth=2)
                ax.set_xlabel('–ß–∞—Å (–≥–æ–¥)')
                ax.set_ylabel('–ó–Ω–æ—Å (–º–∫–º)')
                ax.set_title('–î–∏–Ω–∞–º—ñ–∫–∞ –∑–Ω–æ—Å—É —É —á–∞—Å—ñ')
                ax.grid(True, alpha=0.3)
                st.pyplot(fig)
            
            with tab2:
                fig, axes = plt.subplots(2, 2, figsize=(12, 8))
                
                # –ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                axes[0, 0].plot(data['time'], data['load'])
                axes[0, 0].set_title('–ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è')
                axes[0, 0].grid(True, alpha=0.3)
                
                # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                axes[0, 1].plot(data['time'], data['temperature'])
                axes[0, 1].set_title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
                axes[0, 1].grid(True, alpha=0.3)
                
                # –í—ñ–±—Ä–∞—Ü—ñ—è
                axes[1, 0].plot(data['time'], data['vibration'])
                axes[1, 0].set_title('–í—ñ–±—Ä–∞—Ü—ñ—è')
                axes[1, 0].grid(True, alpha=0.3)
                
                # –ö–æ—Ä–µ–ª—è—Ü—ñ—è
                correlation = data[['wear', 'load', 'temperature', 'vibration']].corr()
                sns.heatmap(correlation, annot=True, ax=axes[1, 1])
                axes[1, 1].set_title('–ö–æ—Ä–µ–ª—è—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤')
                
                plt.tight_layout()
                st.pyplot(fig)
            
            with tab3:
                st.dataframe(data.head(100), use_container_width=True)
                
                # –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
                csv = data.to_csv(index=False)
                st.download_button(
                    label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV",
                    data=csv,
                    file_name=f"wear_data_{selected_part}_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                    mime="text/csv"
                )
    
    def show_model_training(self):
        """–†–æ–∑–¥—ñ–ª –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ."""
        st.header("ü§ñ –ù–∞–≤—á–∞–Ω–Ω—è –≥—ñ–±—Ä–∏–¥–Ω–æ—ó –º–æ–¥–µ–ª—ñ")
        
        if st.session_state.training_data is None:
            st.warning("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ –¥–∞–Ω—ñ —É —Ä–æ–∑–¥—ñ–ª—ñ '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö'")
            return
        
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞–≤—á–∞–Ω–Ω—è")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª—ñ:**")
            lstm_units = st.text_input("LSTM –Ω–µ–π—Ä–æ–Ω–∏:", "64, 32")
            mlp_units = st.text_input("MLP –Ω–µ–π—Ä–æ–Ω–∏:", "128, 64")
            dropout_rate = st.slider("Dropout rate:", 0.1, 0.5, 0.3)
        
        with col2:
            st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –Ω–∞–≤—á–∞–Ω–Ω—è:**")
            epochs = st.number_input("–ï–ø–æ—Ö–∏:", 10, 1000, 100)
            batch_size = st.selectbox("–†–æ–∑–º—ñ—Ä –±–∞—Ç—á—É:", [16, 32, 64, 128])
            test_size = st.slider("–¢–µ—Å—Ç–æ–≤–∞ –≤–∏–±—ñ—Ä–∫–∞ %:", 0.1, 0.4, 0.2)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è
        if st.button("üéØ –ü–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è", type="primary"):
            with st.spinner("–ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ..."):
                try:
                    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –æ–±—Ä–æ–±–∫–∏
                    static_features = ['hardness_hv', 'roughness_avg', 'young_modulus', 'density']
                    dynamic_features = ['load', 'temperature', 'vibration']
                    
                    # –ü–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö
                    processed_data = self.model.preprocess_data(
                        st.session_state.training_data,
                        static_features=static_features,
                        dynamic_features=dynamic_features,
                        test_size=test_size
                    )
                    
                    # –ü–æ–±—É–¥–æ–≤–∞ –º–æ–¥–µ–ª—ñ
                    static_dim = len(static_features)
                    dynamic_dim = len(dynamic_features)
                    
                    self.model.build_model(
                        static_input_dim=static_dim,
                        dynamic_input_dim=dynamic_dim,
                        lstm_units=[int(x.strip()) for x in lstm_units.split(',')],
                        mlp_units=[int(x.strip()) for x in mlp_units.split(',')],
                        dropout_rate=dropout_rate
                    )
                    
                    self.model.compile_model()
                    
                    # –ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
                    history = self.model.train(
                        processed_data=processed_data,
                        epochs=epochs,
                        batch_size=batch_size
                    )
                    
                    st.session_state.processed_data = processed_data
                    st.session_state.model_trained = True
                    st.session_state.training_history = history.history
                    
                    st.success("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø—ñ—à–Ω–æ –Ω–∞–≤—á–µ–Ω–∞!")
                    
                except Exception as e:
                    st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è: {e}")
        
        # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞–≤—á–∞–Ω–Ω—è
        if st.session_state.model_trained:
            st.markdown("---")
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è")
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª—ñ
            if st.session_state.processed_data:
                metrics = self.model.evaluate_model(st.session_state.processed_data)
                
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("MAE", f"{metrics['mae']:.2f}")
                with col2:
                    st.metric("RMSE", f"{metrics['rmse']:.2f}")
                with col3:
                    st.metric("R¬≤", f"{metrics['r2']:.3f}")
                with col4:
                    st.metric("MSE", f"{metrics['mse']:.2f}")
            
            # –ì—Ä–∞—Ñ—ñ–∫–∏ –Ω–∞–≤—á–∞–Ω–Ω—è
            if 'training_history' in st.session_state:
                history = st.session_state.training_history
                
                fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))
                
                # Loss
                ax1.plot(history['loss'], label='Train Loss')
                if 'val_loss' in history:
                    ax1.plot(history['val_loss'], label='Val Loss')
                ax1.set_title('–§—É–Ω–∫—Ü—ñ—è –≤—Ç—Ä–∞—Ç')
                ax1.set_xlabel('–ï–ø–æ—Ö–∞')
                ax1.set_ylabel('Loss')
                ax1.legend()
                ax1.grid(True, alpha=0.3)
                
                # MAE
                if 'mae' in history:
                    ax2.plot(history['mae'], label='Train MAE')
                    if 'val_mae' in history:
                        ax2.plot(history['val_mae'], label='Val MAE')
                    ax2.set_title('–°–µ—Ä–µ–¥–Ω—è –∞–±—Å–æ–ª—é—Ç–Ω–∞ –ø–æ—Ö–∏–±–∫–∞')
                    ax2.set_xlabel('–ï–ø–æ—Ö–∞')
                    ax2.set_ylabel('MAE')
                    ax2.legend()
                    ax2.grid(True, alpha=0.3)
                
                plt.tight_layout()
                st.pyplot(fig)
    
    def show_prediction(self):
        """–†–æ–∑–¥—ñ–ª –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è."""
        st.header("üìä –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∑–Ω–æ—Å—É")
        
        if not st.session_state.model_trained:
            st.warning("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–≤—á—ñ—Ç—å –º–æ–¥–µ–ª—å —É —Ä–æ–∑–¥—ñ–ª—ñ '–ù–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ'")
            return
        
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–°—Ç–∞—Ç–∏—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:**")
            hardness = st.slider("–¢–≤–µ—Ä–¥—ñ—Å—Ç—å (HV):", 100, 1000, 250)
            roughness = st.slider("–®–æ—Ä—Å—Ç–∫—ñ—Å—Ç—å (–º–∫–º):", 0.1, 5.0, 1.2)
            young_modulus = st.slider("–ú–æ–¥—É–ª—å –Æ–Ω–≥–∞ (GPa):", 50, 300, 110)
            density = st.slider("–ì—É—Å—Ç–∏–Ω–∞ (kg/m¬≥):", 1000, 10000, 7200)
        
        with col2:
            st.write("**–î–∏–Ω–∞–º—ñ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:**")
            base_load = st.slider("–ë–∞–∑–æ–≤–µ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:", 10, 200, 50)
            base_temp = st.slider("–ë–∞–∑–æ–≤–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:", 20, 150, 80)
            base_vibration = st.slider("–ë–∞–∑–æ–≤–∞ –≤—ñ–±—Ä–∞—Ü—ñ—è:", 0.1, 10.0, 2.0)
            prediction_hours = st.slider("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ (–≥–æ–¥):", 10, 500, 100)
        
        if st.button("üîÆ –ó—Ä–æ–±–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑", type="primary"):
            with st.spinner("–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑—É..."):
                try:
                    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É
                    static_features = np.array([[hardness, roughness, young_modulus, density]])
                    
                    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∏–Ω–∞–º—ñ—á–Ω–∏—Ö –æ–∑–Ω–∞–∫
                    time_points = np.arange(prediction_hours)
                    load = base_load + 10 * np.sin(2 * np.pi * time_points / 24)
                    temperature = base_temp + 5 * np.sin(2 * np.pi * time_points / 12)
                    vibration = base_vibration + 0.5 * np.sin(2 * np.pi * time_points / 6)
                    
                    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π
                    sequence_length = self.model.sequence_length
                    sequences = []
                    
                    for i in range(len(time_points) - sequence_length):
                        seq = np.column_stack([
                            load[i:i+sequence_length],
                            temperature[i:i+sequence_length],
                            vibration[i:i+sequence_length]
                        ])
                        sequences.append(seq)
                    
                    sequences = np.array(sequences)
                    
                    # –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
                    predictions = self.model.predict(static_features, sequences)
                    
                    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                    st.session_state.prediction_results = {
                        'time': time_points[sequence_length:],
                        'wear': predictions,
                        'load': load[sequence_length:],
                        'temperature': temperature[sequence_length:],
                        'vibration': vibration[sequence_length:]
                    }
                    
                    st.success("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ!")
                    
                except Exception as e:
                    st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è: {e}")
        
        # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É
        if 'prediction_results' in st.session_state:
            st.markdown("---")
            st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è")
            
            results = st.session_state.prediction_results
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É:**")
                st.write(f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –∑–Ω–æ—Å: {results['wear'].min():.2f} –º–∫–º")
                st.write(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –∑–Ω–æ—Å: {results['wear'].max():.2f} –º–∫–º")
                st.write(f"–°–µ—Ä–µ–¥–Ω—ñ–π –∑–Ω–æ—Å: {results['wear'].mean():.2f} –º–∫–º")
                st.write(f"–ó–∞–≥–∞–ª—å–Ω–∏–π –∑–Ω–æ—Å: {results['wear'][-1]:.2f} –º–∫–º")
            
            with col2:
                # –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—ñ
                max_wear = results['wear'].max()
                if max_wear < 50:
                    st.success("‚úÖ –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∑–Ω–æ—Å—É")
                elif max_wear < 100:
                    st.warning("‚ö†Ô∏è –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å –∑–Ω–æ—Å—É")
                else:
                    st.error("üö® –í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –∑–Ω–æ—Å—É - –Ω–µ–æ–±—Ö—ñ–¥–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è!")
            
            # –ì—Ä–∞—Ñ—ñ–∫ –ø—Ä–æ–≥–Ω–æ–∑—É
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(results['time'], results['wear'], linewidth=2, color='red')
            ax.set_xlabel('–ß–∞—Å (–≥–æ–¥)')
            ax.set_ylabel('–ó–Ω–æ—Å (–º–∫–º)')
            ax.set_title('–ü—Ä–æ–≥–Ω–æ–∑ –∑–Ω–æ—Å—É')
            ax.grid(True, alpha=0.3)
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª—ñ–Ω—ñ–π –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—ñ
            ax.axhline(y=50, color='orange', linestyle='--', alpha=0.7, label='–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è')
            ax.axhline(y=100, color='red', linestyle='--', alpha=0.7, label='–ö—Ä–∏—Ç–∏—á–Ω–æ')
            ax.legend()
            
            st.pyplot(fig)
    
    def show_analytics(self):
        """–†–æ–∑–¥—ñ–ª –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏."""
        st.header("üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –∑–≤—ñ—Ç–∏")
        
        if not st.session_state.model_trained:
            st.warning("‚ö†Ô∏è –î–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–≤—á–∏—Ç–∏ –º–æ–¥–µ–ª—å")
            return
        
        st.subheader("–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –∑–≤—ñ—Ç–∏")
        
        tab1, tab2, tab3 = st.tabs(["üìä –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", "üîç –ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–æ–∫", "üìà –¢—Ä–µ–Ω–¥–∏"])
        
        with tab1:
            st.write("**–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –º–æ–¥–µ–ª—ñ**")
            
            if st.session_state.processed_data:
                metrics = self.model.evaluate_model(st.session_state.processed_data)
                
                # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ—Ç—Ä–∏–∫
                fig, ax = plt.subplots(figsize=(8, 4))
                metric_names = ['MAE', 'RMSE', 'R¬≤']
                metric_values = [metrics['mae'], metrics['rmse'], metrics['r2']]
                
                bars = ax.bar(metric_names, metric_values, color=['blue', 'orange', 'green'])
                ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–Ω—è')
                ax.set_title('–ú–µ—Ç—Ä–∏–∫–∏ —è–∫–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ')
                
                # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –Ω–∞ —Å—Ç–æ–≤–ø—Ü—ñ
                for bar, value in zip(bars, metric_values):
                    ax.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.01,
                           f'{value:.3f}', ha='center', va='bottom')
                
                st.pyplot(fig)
        
        with tab2:
            st.write("**–ê–Ω–∞–ª—ñ–∑ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è**")
            
            if st.session_state.processed_data:
                # –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ñ–π –≤–∏–±—ñ—Ä—Ü—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø–æ–º–∏–ª–æ–∫
                y_pred = self.model.predict(
                    st.session_state.processed_data['X_static_test'],
                    st.session_state.processed_data['X_seq_test']
                )
                y_true = self.model.target_scaler.inverse_transform(
                    st.session_state.processed_data['y_test'].reshape(-1, 1)
                ).flatten()
                
                # –ì—Ä–∞—Ñ—ñ–∫ –ø–æ–º–∏–ª–æ–∫
                errors = y_true - y_pred
                
                fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))
                
                # –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ –ø–æ–º–∏–ª–æ–∫
                ax1.hist(errors, bins=50, alpha=0.7, edgecolor='black')
                ax1.set_xlabel('–ü–æ—Ö–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É')
                ax1.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
                ax1.set_title('–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ–º–∏–ª–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è')
                ax1.grid(True, alpha=0.3)
                
                # Q-Q plot –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—ñ
                from scipy import stats
                stats.probplot(errors, dist="norm", plot=ax2)
                ax2.set_title('Q-Q plot –ø–æ–º–∏–ª–æ–∫')
                
                plt.tight_layout()
                st.pyplot(fig)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
                st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫:**")
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("–°–µ—Ä–µ–¥–Ω—è –ø–æ–º–∏–ª–∫–∞", f"{errors.mean():.2f}")
                with col2:
                    st.metric("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è", f"{errors.std():.2f}")
                with col3:
                    st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞", f"{abs(errors).max():.2f}")
        
        with tab3:
            st.write("**–ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤ —Ç–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π**")
            
            if st.session_state.training_data is not None:
                data = st.session_state.training_data
                
                # –ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è
                numeric_cols = data.select_dtypes(include=[np.number]).columns
                correlation = data[numeric_cols].corr()
                
                fig, ax = plt.subplots(figsize=(10, 8))
                sns.heatmap(correlation, annot=True, cmap='coolwarm', center=0, ax=ax)
                ax.set_title('–ö–æ—Ä–µ–ª—è—Ü—ñ—è –º—ñ–∂ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏')
                st.pyplot(fig)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É."""
    try:
        app = WearPredictionApp()
        app.run()
    except Exception as e:
        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –¥–æ–¥–∞—Ç–∫—É: {e}")
        st.info("‚ÑπÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –≤—Å—ñ –º–æ–¥—É–ª—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ")

if __name__ == "__main__":
    main()